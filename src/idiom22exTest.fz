# This is a test that covers quite many cases of parsing strings as integers
# of different sizes
#
idiom22exTest is

  test(s string) =>
    say "parsing i32 decimal: $s results in {s.parseI32}"
    say "parsing i32 binary : $s results in {s.parseI32Binary}"
    say "parsing i32 octal  : $s results in {s.parseI32Octal}"
    say "parsing i32 hex    : $s results in {s.parseI32Hex}"
    say "parsing u32 decimal: $s results in {s.parseU32}"
    say "parsing u32 binary : $s results in {s.parseU32Binary}"
    say "parsing u32 octal  : $s results in {s.parseU32Octal}"
    say "parsing u32 hex    : $s results in {s.parseU32Hex}"
    say "parsing i64 decimal: $s results in {s.parseI64}"
    say "parsing i64 binary : $s results in {s.parseI64Binary}"
    say "parsing i64 octal  : $s results in {s.parseI64Octal}"
    say "parsing i64 hex    : $s results in {s.parseI64Hex}"
    say "parsing u64 decimal: $s results in {s.parseU64}"
    say "parsing u64 binary : $s results in {s.parseU64Binary}"
    say "parsing u64 octal  : $s results in {s.parseU64Octal}"
    say "parsing u64 hex    : $s results in {s.parseU64Hex}"

  test "0"
  test "1"
  test "12"
  test "123"
  test "1234"
  test "12345"
  test "123456"
  test "1234567"
  test "12345678"
  test "123456789"
  test "1234567890"
  test "12345678901"
  test "123456789012"
  test "1234567890123"
  test "12345678901234"
  test "123456789012345"
  test "1234567890123456"
  test "12345678901234567"
  test "123456789012345678"
  test "1234567890123456789"
  test "12345678901234567890"
  test "123456789012345678901"
  test "2147483647"
  test "2147483648"
  test "2147483649"
  test "4294967295"
  test "4294967296"
  test "4294967297"
  test "9223372036854775807"
  test "9223372036854775808"
  test "9223372036854775809"
  test "18446744073709551615"
  test "18446744073709551616"
  test "18446744073709551617"
  test "-1"
  test "-12"
  test "-123"
  test "-1234"
  test "-12345"
  test "-123456"
  test "-1234567"
  test "-12345678"
  test "-123456789"
  test "-1234567890"
  test "-12345678901"
  test "-123456789012"
  test "-1234567890123"
  test "-12345678901234"
  test "-123456789012345"
  test "-1234567890123456"
  test "-12345678901234567"
  test "-123456789012345678"
  test "-1234567890123456789"
  test "-12345678901234567890"
  test "-123456789012345678901"
  test "-2147483647"
  test "-2147483648"
  test "-2147483649"
  test "-4294967295"
  test "-4294967296"
  test "-4294967297"
  test "-9223372036854775807"
  test "-9223372036854775808"
  test "-9223372036854775809"
  test "-18446744073709551615"
  test "-18446744073709551616"
  test "-18446744073709551617"
  test "+0"
  test "-0"
  test "+1"
  test "-1"
  test "+12"
  test "-12"
  test "++0"
  test "--0"
  test "0+"
  test "0-"
  test "+"
  test "-"
  test ""
  test "abc"
  test " "
  test "\t"
  test "0000000000000000000000000000000000000000000000000000000000000000000000000000000000123"
  test "+0000000000000000000000000000000000000000000000000000000000000000000000000000000000123"
  test "-0000000000000000000000000000000000000000000000000000000000000000000000000000000000123"
  test "deadbeef"
  test "BadCodeFacadeOff"
  test "7fffffff"
  test "ffffffff"
  test "7fffffffffffffff"
  test "ffffffffffffffff"
  test "01010101010101010101010101010101"
  test "10101010101010101010101010101010"
  test "0101010101010101010101010101010101010101010101010101010101010101"
  test "1010101010101010101010101010101010101010101010101010101010101010"
